{"version":3,"sources":["components/square/square.js","utils/getPosition.js","utils/utils.js","App.js","hooks/useActions.js","reportWebVitals.js","index.js"],"names":["Square","type","handleClick","index","isDisabled","disabled","id","onClick","className","getPositionChanges","newPosition","BOARD","App","useState","maze","setMaze","count","setCount","lastCross","setLastCross","changePosition","changes","newMaze","map","square","forEach","position","autoMove","console","log","indexOf","nextPosition","Math","random","lastIndexOf","crosses","isAvaliable","useActions","handleMove","event","preventDefault","Number","target","element","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAceA,MAVf,YAAgD,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,MAC5BC,EAAsB,SAATH,GAA4B,SAATA,GAA4B,WAATA,EACzD,OACI,wBAAQI,SAAUD,EAAYE,GAAIH,EAAOI,QAASL,EAAaM,UAAWP,K,OCPrEQ,EAAqB,SAACC,GAC/B,MAAO,CACHA,EAAc,GACdA,EAAc,GACdA,EAAc,EACdA,EAAc,ICLTC,EAAQ,CAEjxHWC,MA5Bf,WAAgB,IAAD,ECHR,WAAwB,IAAD,EACFC,mBAASF,GADP,mBACnBG,EADmB,KACbC,EADa,OAEAF,mBAAS,GAFT,mBAEnBG,EAFmB,KAEZC,EAFY,OAGAJ,oBAAS,GAHT,gCAIQA,mBAAS,IAJjB,mBAInBK,EAJmB,KAIRC,EAJQ,KA2D1B,MAAO,CACHL,OACAE,QACAI,eAxDmB,SAACV,GACpB,IAAMW,EAAUZ,EAAmBC,GAC9BY,EAAUR,EAAKS,KAAI,SAACC,GACrB,MAAe,cAAXA,GAAqC,WAAXA,EAA4B,SACnDA,KAEZH,EAAQI,SAAQ,SAACC,EAAUvB,GACC,SAAnBW,EAAKY,IAAwBA,EAAW,KAA6B,WAAtBJ,EAAQI,KAC3DJ,EAAQI,GAAY,gBAEzBJ,EAAQZ,GAAe,SACvBK,EAAQO,GACRL,EAASD,EAAQ,IA6ChBW,SAzCa,WACbC,QAAQC,IAAI,aACYf,EAAKgB,QAAQ,UAArC,IACMC,EAAeC,KAAKC,SAAW,GAAMnB,EAAKoB,YAAY,aAAepB,EAAKgB,QAAQ,aAClFT,EAAYZ,EAAmBsB,GAC/BT,EAAUR,EAAKS,KAAI,SAACC,GACtB,MAAe,cAAXA,GAAqC,WAAXA,EAA4B,SACnDA,KAERW,EAAU,EAUb,GATAd,EAAQI,SAAQ,SAACC,GACU,SAAnBZ,EAAKY,IAAwBA,EAAW,KAA6B,WAAtBJ,EAAQI,KAC3DJ,EAAQI,GAAY,YACpBS,GAAW,MAEXA,EAAU,GACVhB,EAAaY,GAEjBT,EAAQS,GAAgB,SACH,MAAjBA,EAAsB,CACtB,IAAMK,EAAcd,EAAQQ,QAAQ,cACnB,IAAjBM,EAAuBd,EAAQS,GAAgB,SAAWT,EAAQJ,GAAa,UAC1D,IAAjBkB,GAAuC,MAAjBL,GACDtB,EAAmBS,GAC7BO,SAAQ,SAACC,GACO,SAAnBZ,EAAKY,IAAwBA,EAAW,MAC5CJ,EAAQI,GAAY,YACpBS,GAAW,MAIvBpB,EAAQO,GACRL,EAASD,EAAQ,KDlD2BqB,GAA1CvB,EADK,EACLA,KAAME,EADD,EACCA,MAAOI,EADR,EACQA,eAAgBO,EADxB,EACwBA,SAE/BW,EAAa,SAACC,GAClBA,EAAMC,iBACN,IAAM9B,EAAc+B,OAAOF,EAAMG,OAAOpC,IACxCc,EAAeV,GACI,MAAhBA,GAAqBkB,QAAQC,IAAI,YAEtC,OACE,uBAAMrB,UAAU,MAAhB,UACE,mCACE,4CACA,wBAAQD,QAASoB,EAAjB,wBACA,2CAAcX,QAEhB,yBAASR,UAAU,YAAnB,SAEIM,EAAKS,KAAI,SAACoB,EAASxC,GACjB,OAAO,cAAC,EAAD,CAAQD,YAAaoC,EAAwBnC,MAAOA,EAAOF,KAAM0C,GAA3BxC,QAInD,gEAA+B,mBAAGyC,KAAK,+BAAR,uBAA/B,WEnBSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cae70a08.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './square.css'\r\n\r\nfunction Square ({ type, handleClick, index }) {\r\n    const isDisabled = type === 'wall' || type === 'path' || type === 'passed'\r\n    return (\r\n        <button disabled={isDisabled} id={index} onClick={handleClick} className={type} >\r\n            \r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nexport default Square","export const getPositionChanges = (newPosition) => {\r\n    return [\r\n        newPosition - 12,\r\n        newPosition + 12,\r\n        newPosition + 1,\r\n        newPosition - 1\r\n    ]\r\n}","export const BOARD = [\r\n    // row 1\r\n    'wall',\r\n    'avatar',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    // row 2\r\n    'wall',\r\n    'avaliable',\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    // row 3\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'wall',\r\n    'wall',\r\n    // row 4\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    // row 5\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'path',\r\n    'wall',\r\n    // row 6\r\n    'wall',\r\n    'path',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    // row 7\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    // row 8\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    // row 9\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    // row 10\r\n    'wall',\r\n    'wall',\r\n    'path',\r\n    'wall',\r\n    'wall',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    'wall',\r\n    // row 11\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    'wall',\r\n    'path',\r\n    'path',\r\n    'path',\r\n    // row 12\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n    'wall',\r\n]","import './App.css'\n\n// components\nimport Square from './components/square/square';\n\n// hooks\nimport { useActions } from './hooks/useActions';\n\nfunction App() {\n  const { maze, count, changePosition, autoMove } = useActions()\n\n  const handleMove = (event) => {\n    event.preventDefault()\n    const newPosition = Number(event.target.id)\n    changePosition(newPosition)\n    if(newPosition === 131) console.log('You Won')\n  }\n  return (\n    <main className='App'>\n      <header>\n        <h1>Maze Game!</h1> \n        <button onClick={autoMove} >Auto solve</button>\n        <span>moves: {count}</span>\n      </header>\n      <section className='container'>\n        {\n          maze.map((element, index) => {\n            return <Square handleClick={handleMove} key={index} index={index} type={element} />\n          })\n        }\n      </section>\n      <footer>Made with &#128147; by <a href='https://github.com/edabrito7'>edabrito7</a> </footer>\n    </main>\n  );\n}\n\nexport default App;\n","import { useState } from 'react'\r\nimport { getPositionChanges } from '../utils/getPosition'\r\nimport { BOARD } from '../utils/utils'\r\n\r\n\r\nexport function useActions () {\r\n    const [maze, setMaze] = useState(BOARD)\r\n    const [count, setCount] = useState(0)\r\n    const [start, setStart] = useState(false)\r\n    const [lastCross, setLastCross] = useState(0)\r\n\r\n    const changePosition = (newPosition) => {\r\n        const changes = getPositionChanges(newPosition)\r\n       const newMaze = maze.map((square) => {\r\n            if (square === 'avaliable' || square === 'avatar') return 'passed'\r\n            return square\r\n       })\r\n       changes.forEach((position, index) => {\r\n            if (maze[position] === 'wall' || position > 143 || newMaze[position] === 'passed') return \r\n            newMaze[position] = 'avaliable'\r\n       })\r\n       newMaze[newPosition] = 'avatar'\r\n       setMaze(newMaze)\r\n       setCount(count + 1)\r\n    }\r\n\r\n    // need work\r\n    const autoMove = () => {\r\n        console.log('I am here')\r\n        const currentPosition = maze.indexOf('avatar') \r\n        const nextPosition = Math.random() > 0.5 ? maze.lastIndexOf('avaliable') : maze.indexOf('avaliable') // random direction\r\n        const changes =   getPositionChanges(nextPosition)\r\n        const newMaze = maze.map((square) => {\r\n            if (square === 'avaliable' || square === 'avatar') return 'passed'\r\n            return square\r\n       })\r\n       let crosses = 0\r\n        changes.forEach((position) => {\r\n            if (maze[position] === 'wall' || position > 143 || newMaze[position] === 'passed') return \r\n            newMaze[position] = 'avaliable'\r\n            crosses += 1\r\n        })\r\n        if (crosses > 1) {\r\n            setLastCross(nextPosition) \r\n        }\r\n        newMaze[nextPosition] = 'avatar'\r\n        if (nextPosition !== 131) {\r\n            const isAvaliable = newMaze.indexOf('avaliable')\r\n            isAvaliable !== -1   ? newMaze[nextPosition] = 'avatar' : newMaze[lastCross] = 'avatar'\r\n            if (isAvaliable === -1 && nextPosition !== 131) {\r\n                const newChanges =   getPositionChanges(lastCross)\r\n                newChanges.forEach((position) => {\r\n                    if (maze[position] === 'wall' || position > 143) return \r\n                    newMaze[position] = 'avaliable'\r\n                    crosses += 1\r\n                })\r\n            }\r\n        }\r\n        setMaze(newMaze)\r\n        setCount(count + 1)\r\n    } \r\n\r\n    \r\n\r\n    return {\r\n        maze,\r\n        count,\r\n        changePosition,\r\n        autoMove\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}